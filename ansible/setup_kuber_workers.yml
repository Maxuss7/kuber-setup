---
# Usage:
# ansible-playbook -e master_ip=MASTER_IP -e master_kuber_token=TOKEN -e hash=HASH -i inventory.ini setup_kuber_worker.yml

- name: Install Kubernetes and connect workers
  hosts: workers
  become: yes

  vars:
    master_ip: "{{ master_ip }}" # can be vpn ip
    master_kuber_token: "{{ master_kuber_token }}"
    hash: "{{ hash }}"

  tasks:
    - name: Disable swap (temporary)
      command: swapoff -a

    - name: Clean up old kubelet config files (if any)
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - /etc/kubernetes/kubelet.conf
        - /etc/kubernetes/bootstrap-kubelet.conf
        - /etc/kubernetes/pki

    - name: Update apt repositories
      apt:
        update_cache: yes

    - name: Install required packages
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
        state: present
        update_cache: yes 

    - name: Create directory for apt keyrings
      file:
        path: /etc/apt/keyrings
        state: directory
        
    - name: Download Kubernetes APT GPG key
      get_url:
        url: https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key
        dest: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
        mode: '0644'
      register: gpg_key_download

    - name: Convert key to GPG format (if needed)
      command:
        cmd: gpg --yes --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg /etc/apt/keyrings/kubernetes-apt-keyring.gpg
      when: gpg_key_download.changed

    - name: Add Kubernetes apt repository
      apt_repository:
        repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /"
        filename: kubernetes
        state: present

    - name: Update apt cache after adding Kubernetes repo
      apt:
        update_cache: yes

    - name: Install Kubernetes components
      apt:
        name:
          - kubelet
          - kubeadm
          - kubectl
          - containerd
        state: present

    - name: Activate br_netfilter and overlay modules
      modprobe:
        name: "{{ item }}"
        state: present
      loop:
        - br_netfilter
        - overlay

    - name: Enable packet forwarding and bridge netfilter
      sysctl:
        name: "{{ item }}"
        value: "1"
        state: present
        reload: yes
      loop:
        - net.ipv4.ip_forward
        - net.bridge.bridge-nf-call-iptables

    - name: Ensure containerd configuration directory exists
      file:
        path: /etc/containerd
        state: directory

    - name: Update containerd config.toml for SystemdCgroup
      copy:
        dest: /etc/containerd/config.toml
        content: |
          version = 2
          [plugins]
            [plugins."io.containerd.grpc.v1.cri"]
             [plugins."io.containerd.grpc.v1.cri".containerd]
                [plugins."io.containerd.grpc.v1.cri".containerd.runtimes]
                  [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
                    runtime_type = "io.containerd.runc.v2"
                    [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
                      SystemdCgroup = true
        mode: '0644'

    - name: Restart containerd
      systemd:
        name: containerd
        state: restarted

    - name: Join the node to the Kubernetes cluster
      command: >
        kubeadm join {{ master_ip }}:6443
        --token {{ master_kuber_token }}
        --discovery-token-ca-cert-hash {{ hash }}
      register: join_result

      
